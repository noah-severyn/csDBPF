{
  "api/csDBPF.ByteArrayHelper.html": {
    "href": "api/csDBPF.ByteArrayHelper.html",
    "title": "Class ByteArrayHelper | csDBPF",
    "summary": "Class ByteArrayHelper Namespace csDBPF Assembly csDBPF.dll Helper methods to parse a byte array into an array of one of the DBPF data types. public static class ByteArrayHelper Inheritance object ByteArrayHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ReadBytesIntoUint(byte[], int) Sequentially reads 4 bytes and assigns them to a uint in big-endian order. public static uint ReadBytesIntoUint(byte[] data, int offset = 0) Parameters data byte[] Array to read from offset int Location in array to start at. Default is 0 Returns uint Uint value ReadBytesIntoUshort(byte[], int) Sequentially reads 2 bytes from the specified position and assigns them to a uint in big-endian order. public static ushort ReadBytesIntoUshort(byte[] data, int offset = 0) Parameters data byte[] Array to read from offset int Location in array to start at. Default is 0 Returns ushort Ushort value ReadTextIntoByte(byte[], int) Sequentially reads 1 byte, converts it to string equivalent, then parses back into a byte. public static byte ReadTextIntoByte(byte[] data, int offset = 0) Parameters data byte[] Array to read from offset int Location in array to start at. Default is 0 Returns byte Byte value ReadTextToFloat(byte[], int, int) Sequentially reads a number of bytes, converts them to string equivalents, then parses them into a float. public static float ReadTextToFloat(byte[] data, int offset, int length) Parameters data byte[] Array to read from offset int Location in array to start at. Default is 0 length int Length to read Returns float ReadTextToInt(byte[], int, int) Sequentially reads a number of bytes, converts them to string equivalents, then parses them into an int. public static int ReadTextToInt(byte[] data, int offset, int length) Parameters data byte[] Array to read from offset int Location in array to start at. Default is 0 length int Length to read Returns int ReadTextToLong(byte[], int, int) Sequentially reads a number of bytes, converts them to string equivalents, then parses them into a long. public static long ReadTextToLong(byte[] data, int offset, int length) Parameters data byte[] Array to read from offset int Location in array to start at. Default is 0 length int Length to read Returns long ReadTextToUint(byte[], int) Sequentially reads 4 bytes, converts them to string equivalents, then parses them into a uint. public static uint ReadTextToUint(byte[] data, int offset = 0) Parameters data byte[] Array to read from offset int Location in array to start at. Default is 0 Returns uint Uint value ToAString(byte[]) Reads a byte array and returns a string of the entire array. public static string ToAString(byte[] data) Parameters data byte[] Data to parse Returns string A string of parsed data ToAString(byte[], int) Reads a byte array and returns a string from the specified location to the end of the array. public static string ToAString(byte[] data, int start) Parameters data byte[] Data to parse start int Location to start parsing at Returns string A string of parsed data ToAString(byte[], int, int) Reads a byte array and returns a string from the specified location for a determined length. public static string ToAString(byte[] data, int start, int length) Parameters data byte[] Data to parse start int Location to start parsing at length int Length of the provided data to parse Returns string A string of parsed data Remarks Any non-printable characters are replaced with a period ('.'). ToBoolArray(byte[]) Convert byte array to boolean array. public static bool[] ToBoolArray(byte[] data) Parameters data byte[] Data to parse Returns bool[] Array of boolean values ToBytes(bool[]) Parses an array of booleans into bytes. public static byte[] ToBytes(bool[] data) Parameters data bool[] Data to parse Returns byte[] The array of data as bytes ToBytes(char[]) Parses an array of chars (UInt8) into bytes. public static byte[] ToBytes(char[] data) Parameters data char[] Data to parse Returns byte[] The array of data as bytes ToBytes(int[]) Parses an array of ints (Sint32) into bytes. public static byte[] ToBytes(int[] data) Parameters data int[] Data to parse Returns byte[] The array of data as bytes ToBytes(long, int) Converts a long to byte array with the given length. public static byte[] ToBytes(long value, int numPlaces = 8) Parameters value long Value to convert numPlaces int Length of returned array Returns byte[] ToBytes(long[]) Parses an array of longs (SInt64) into bytes. public static byte[] ToBytes(long[] data) Parameters data long[] Data to parse Returns byte[] The array of data as bytes ToBytes(float[]) Parses an array of floats (Float32) into bytes. public static byte[] ToBytes(float[] data) Parameters data float[] Data to parse Returns byte[] The array of data as bytes ToBytes(string, bool) Reads a string and parses into a byte array the same length as the string public static byte[] ToBytes(string data, bool singleByte = false) Parameters data string Data to parse singleByte bool Parse type. FALSE (Default) is two byte output per char (Unicode); TRUE is one byte output per char: (ANSI/Windows-1252) Returns byte[] The string as bytes ToBytes(ushort[]) Parses an array of ushorts (UInt16) into bytes. public static byte[] ToBytes(ushort[] data) Parameters data ushort[] Data to parse Returns byte[] The array of data as bytes ToBytes(uint[]) Parses an array of uints (UInt32) into bytes. public static byte[] ToBytes(uint[] data) Parameters data uint[] Data to parse Returns byte[] The array of data as bytes ToFloat32Array(byte[]) Convert byte array to Float32 array. public static float[] ToFloat32Array(byte[] data) Parameters data byte[] Data to parse Returns float[] Array of float values ToFloat32List(byte[]) Convert byte array to Float32 List. public static List<float> ToFloat32List(byte[] data) Parameters data byte[] Data to parse Returns List<float> List of float values ToSInt32Array(byte[]) Convert byte array to SInt32 array. public static int[] ToSInt32Array(byte[] data) Parameters data byte[] Data to parse Returns int[] Array of int values ToSInt64Array(byte[]) Convert byte array to SInt64 array. public static long[] ToSInt64Array(byte[] data) Parameters data byte[] Data to parse Returns long[] Array of long values ToSInt64List(byte[]) Convert byte array to long List public static List<long> ToSInt64List(byte[] data) Parameters data byte[] Data to parse Returns List<long> List of long values ToUInt16Array(byte[]) Convert byte array to UInt16 array. public static ushort[] ToUInt16Array(byte[] data) Parameters data byte[] Data to parse Returns ushort[] Array of ushort values ToUInt32Array(byte[]) Convert byte array to UInt32 array. public static uint[] ToUInt32Array(byte[] data) Parameters data byte[] Data to parse Returns uint[] Array of uint values ToUint8Array(byte[]) Convert byte array to UInt8 array. A Uint8 is the same as a byte, so just return the byte array. public static byte[] ToUint8Array(byte[] data) Parameters data byte[] Data to parse Returns byte[] Array of byte values"
  },
  "api/csDBPF.DBPFEntry.EncodingType.html": {
    "href": "api/csDBPF.DBPFEntry.EncodingType.html",
    "title": "Enum DBPFEntry.EncodingType | csDBPF",
    "summary": "Enum DBPFEntry.EncodingType Namespace csDBPF Assembly csDBPF.dll Specifies the encoding type for an entry or properties. public enum DBPFEntry.EncodingType Fields Binary = 0 Entry/property is encoded in binary format. Text = 1 Entry/property is encoded in text format."
  },
  "api/csDBPF.DBPFEntry.html": {
    "href": "api/csDBPF.DBPFEntry.html",
    "title": "Class DBPFEntry | csDBPF",
    "summary": "Class DBPFEntry Namespace csDBPF Assembly csDBPF.dll An abstract form of an entry item, representing an instance of a subfile that may be contained in a DBPFFile. The data for each entry is not parsed or decoded until Decode() is called to decompress and set the actual entry data. public abstract class DBPFEntry Inheritance object DBPFEntry Derived DBPFEntryDIR DBPFEntryEXMP DBPFEntryFSH DBPFEntryLTEXT DBPFEntryPNG Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors DBPFEntry(TGI) Create a new DBPFEntry object with a given TGI struct. public DBPFEntry(TGI tgi) Parameters tgi TGI DBPFEntry(TGI, uint, uint, uint, byte[]) Create a new DBPFEntry object. public DBPFEntry(TGI tgi, uint offset, uint size, uint index, byte[] bytes) Parameters tgi TGI TGI object representing the entry offset uint Offset (location) of the entry within the DBPF file size uint Compressed size of data for the entry, in bytes. Uncompressed size is also temporarily set to this to this until the data is set index uint Entry position in the file, 0-n bytes byte[] Byte data for this entry Properties ByteData Byte array of raw data pertaining to this entry. This may or may not be compressed. public byte[] ByteData { get; protected set; } Property Value byte[] Remarks The interpretation of the entry data depends on the compression status and the entry type (known through its TGI). Always check if the data is compressed before processing. CompressedSize Compressed size of the entry data, in bytes. public uint CompressedSize { get; protected set; } Property Value uint Remarks This may be null if ByteData is null or if ByteData has been updated and not yet re-compressed. ErrorLog Gets a list of issues encountered when parsing this entry. public List<DBPFError> ErrorLog { get; } Property Value List<DBPFError> Remarks For Entries, the FileName is blank as it is unknown in this item's context - it's a property of this entry's parent DBPFFile. IndexPos Position of this entry in relation to the other entries in the DBPFFile, 0-n. public uint IndexPos { get; } Property Value uint IsCompressed Get the current compression state of ByteData. May be null if the compression state is unknown. public bool IsCompressed { get; } Property Value bool Offset H Byte position of this entry within the DBPFFile. public uint Offset { get; } Property Value uint TGI The TGI set representing the file type of the entry. public TGI TGI { get; } Property Value TGI UncompressedSize Uncompressed size of the entry data, in bytes. public uint UncompressedSize { get; protected set; } Property Value uint Remarks This may be null if ByteData is null. Methods Decode() Decompresses the data (if necessary) and sets the entry's data object from ByteData according to the specific entry's type. public abstract void Decode() Encode(bool) Builds ByteData with the current state of the entry's data object. The encoding can be either text or binary according to DBPFEntry.EncodingType. public abstract void Encode(bool compress = false) Parameters compress bool Whether to compress the ByteData. Default is FALSE GetSize() Return either the Compressed or Uncompressed size depending on if this entry is compressed or not. public uint GetSize() Returns uint The size in bytes IsExemplar() Returns whether this entry is an Exemplar or Cohort Entry public bool IsExemplar() Returns bool TRUE if is an Exemplar or Cohort; FALSE otherwise MatchesEntryType(TGI) Determine if the entry is the same entry type as the specified one. public bool MatchesEntryType(TGI known) Parameters known TGI DBPFTGI to compare against Returns bool TRUE if this Entry matches the specified; FALSE otherwise. Remarks This is a shortcut equivalent to Matches(TGI). ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/csDBPF.DBPFEntryDIR.DBDFItem.html": {
    "href": "api/csDBPF.DBPFEntryDIR.DBDFItem.html",
    "title": "Struct DBPFEntryDIR.DBDFItem | csDBPF",
    "summary": "Struct DBPFEntryDIR.DBDFItem Namespace csDBPF Assembly csDBPF.dll Struct which represents one item in the DBDF directory list. Each item is a reference to a compressed entry in the DBPF file. public readonly struct DBPFEntryDIR.DBDFItem Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties GID Item Group ID. public uint GID { get; } Property Value uint IID Item Instance ID. public uint IID { get; } Property Value uint Size Item size in bytes. public uint Size { get; } Property Value uint TID Item Type ID. public uint TID { get; } Property Value uint"
  },
  "api/csDBPF.DBPFEntryDIR.html": {
    "href": "api/csDBPF.DBPFEntryDIR.html",
    "title": "Class DBPFEntryDIR | csDBPF",
    "summary": "Class DBPFEntryDIR Namespace csDBPF Assembly csDBPF.dll An implementation of DBPFEntry for Directory entries. Object data is stored in CompressedItems. public class DBPFEntryDIR : DBPFEntry Inheritance object DBPFEntry DBPFEntryDIR Inherited Members DBPFEntry.TGI DBPFEntry.Offset DBPFEntry.IndexPos DBPFEntry.UncompressedSize DBPFEntry.CompressedSize DBPFEntry.IsCompressed DBPFEntry.ByteData DBPFEntry.ErrorLog DBPFEntry.ToString() DBPFEntry.MatchesEntryType(TGI) DBPFEntry.IsExemplar() DBPFEntry.GetSize() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors DBPFEntryDIR() Create a new instance. Use when creating a new Directory. public DBPFEntryDIR() DBPFEntryDIR(uint, uint, uint, byte[]) Create a new instance. Use when reading an existing directory from a file. public DBPFEntryDIR(uint offset, uint size, uint index, byte[] bytes) Parameters offset uint Offset (location) of the entry within the DBPF file size uint Compressed size of data for the entry, in bytes. Uncompressed size is also temporarily set to this to this until the data is set index uint Entry position in the file, 0-n bytes byte[] Byte data for this entry Remarks Directory subfiles are special in that their TGI is always the same, so providing TGI as an argument is unnecessary. Properties CompressedItems List of DBPFEntryDIR.DBDFItem representing the TGI set and the decompressed byte size of each subfile in this file. public List<DBPFEntryDIR.DBDFItem> CompressedItems { get; } Property Value List<DBPFEntryDIR.DBDFItem> Methods Decode() Sets the directory entry from raw data and sets the CompressedItems property of this instance. public override void Decode() Encode(bool) Build ByteData from the current state of this instance. public override void Encode(bool compress = false) Parameters compress bool Note this has no effect as DIR entries always remain uncompressed"
  },
  "api/csDBPF.DBPFEntryEXMP.html": {
    "href": "api/csDBPF.DBPFEntryEXMP.html",
    "title": "Class DBPFEntryEXMP | csDBPF",
    "summary": "Class DBPFEntryEXMP Namespace csDBPF Assembly csDBPF.dll An implementation of DBPFEntry for Exemplar and Cohort entries. Object data is stored in ListOfProperties. public class DBPFEntryEXMP : DBPFEntry Inheritance object DBPFEntry DBPFEntryEXMP Inherited Members DBPFEntry.TGI DBPFEntry.Offset DBPFEntry.IndexPos DBPFEntry.UncompressedSize DBPFEntry.CompressedSize DBPFEntry.IsCompressed DBPFEntry.ByteData DBPFEntry.ErrorLog DBPFEntry.ToString() DBPFEntry.MatchesEntryType(TGI) DBPFEntry.IsExemplar() DBPFEntry.GetSize() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors DBPFEntryEXMP(TGI) Create a new instance. Use when creating a new exemplar. public DBPFEntryEXMP(TGI tgi) Parameters tgi TGI DBPFEntryEXMP(TGI, uint, uint, uint, byte[]) Create a new instance. Use when reading an existing exemplar from a file. public DBPFEntryEXMP(TGI tgi, uint offset, uint size, uint index, byte[] bytes) Parameters tgi TGI DBPFTGI object representing the entry offset uint Offset (location) of the entry within the DBPF file size uint Compressed size of data for the entry, in bytes. Uncompressed size is also temporarily set to this to this until the data is set index uint Entry position in the file, 0-n bytes byte[] Byte data for this entry Properties IsCohort Determine if the file is Exemplar or Cohort. public bool IsCohort { get; set; } Property Value bool ListOfProperties List of one or more DBPFProperty associated with this entry. Sorted by ID. public SortedList<uint, DBPFProperty> ListOfProperties { get; set; } Property Value SortedList<uint, DBPFProperty> ParentCohort The Parent Cohort for this exemplar. public TGI ParentCohort { get; set; } Property Value TGI Methods AddOrUpdateProperty(DBPFProperty) Update a property if it exists or add if it is not found. public void AddOrUpdateProperty(DBPFProperty prop) Parameters prop DBPFProperty Property to add or update AddProperty(DBPFProperty) Add a property to this exemplar/cohort. If the property already exists no action is taken. public void AddProperty(DBPFProperty prop) Parameters prop DBPFProperty Property to add Decode() Decompresses the exemplar/cohort instance and sets ListOfProperties as one or more DBPFProperty from a byte sequence. public override void Decode() Remarks Use when reading from a file. Encode(bool) Build ByteData from the current state of this instance. public override void Encode(bool compress = false) Parameters compress bool Whether to compress the ByteData. Default is FALSE GetExemplarName() Gets the Exemplar Name of the property. public string GetExemplarName() Returns string Exemplar Name if found; null property is not found Remarks Simply a shortcut for Entry.GetProperty(0x20) GetExemplarType() Gets the Exemplar Type (0x00 - 0x2B) of the property. See DBPFProperty.ExemplarType for the full list. public DBPFProperty.ExemplarType GetExemplarType() Returns DBPFProperty.ExemplarType Exemplar Type if found; Error if property is not found Remarks Simply a shortcut for Entry.GetProperty(0x10) GetProperty(string) Lookup and return a property from a list of properties in the entry. public DBPFProperty GetProperty(string name) Parameters name string Name of property to check. Name is case insensitive and ignores spaces. Returns DBPFProperty A DBPFProperty of the match if found; otherwise, null. GetProperty(uint) Lookup and return a property from a list of properties in the entry. public DBPFProperty GetProperty(uint propertyId) Parameters propertyId uint Id of the property to find. Returns DBPFProperty A DBPFProperty of the match if found; otherwise, null. HasProperty(string) Evaluate whether this entry contains the specified property. public bool HasProperty(string name) Parameters name string Name of property to check. Name is case insensitive and ignores spaces. Returns bool true if the property is present; otherwise false. HasProperty(uint) Evaluate whether this entry contains the specified property. public bool HasProperty(uint propertyId) Parameters propertyId uint Id of the property to check Returns bool true if the property is present; otherwise, false. IsTextEncoding() Returns the encoding type of this entry. public bool IsTextEncoding() Returns bool TRUE if text encoding; FALSE otherwise RemoveAllProperties() Removes all the properties from this cohort/exemplar. public void RemoveAllProperties() RemoveProperty(uint) Remove a property to this exemplar/cohort. No action is taken if the property is not found. public void RemoveProperty(uint id) Parameters id uint Property ID to remove UpdateProperty(DBPFProperty) Update a property in this exemplar/cohort public void UpdateProperty(DBPFProperty prop) Parameters prop DBPFProperty Property to update"
  },
  "api/csDBPF.DBPFEntryFSH.BitmapType.html": {
    "href": "api/csDBPF.DBPFEntryFSH.BitmapType.html",
    "title": "Enum DBPFEntryFSH.BitmapType | csDBPF",
    "summary": "Enum DBPFEntryFSH.BitmapType Namespace csDBPF Assembly csDBPF.dll Defines the bitmap type stored in this file. public enum DBPFEntryFSH.BitmapType Fields DXT1 = 96 Type: DXT1 4x4 packed, 1-bit alpha Palette: none Compression: 4x4 grid compressed, half-byte per pixel DXT3 = 97 Type: DXT3 4x4 packed, 4-bit alpha Palette: none Compression: 4x4 grid compressed, half-byte per pixel EightBit = 123 Type: 8-bit indexed Palette: directly follows bitmap or uses global palette Compression: none SixteenBit = 120 Type: 16-bit A0 R5 G6 B5 Palette: none Compression: none SixteenBitAlpha4 = 109 Type: 16-bit A4 R4 G4 B4 Palette: none Compression: none SixteenBitAlpha5 = 126 Type: 16-bit A1 R5 G5 B5 Palette: none Compression: none ThirtyTwoBit = 125 Type: 32-bit A8 R8 G8 B8 Palette: none Compression: none TwentyFourBit = 127 Type: 24-bit A0 R8 G8 B8 Palette: none Compression: none"
  },
  "api/csDBPF.DBPFEntryFSH.FSHEntry.html": {
    "href": "api/csDBPF.DBPFEntryFSH.FSHEntry.html",
    "title": "Class DBPFEntryFSH.FSHEntry | csDBPF",
    "summary": "Class DBPFEntryFSH.FSHEntry Namespace csDBPF Assembly csDBPF.dll Holds information about the bitmap data. public class DBPFEntryFSH.FSHEntry Inheritance object DBPFEntryFSH.FSHEntry Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FSHEntry(string?) Holds information about the bitmap data. public FSHEntry(string? name) Parameters name string Name of this entry, as read from csDBPF.DBPFEntryFSH.FSHDirectoryItem.Name Properties Code Specifies how this bitmap's pixel and color information is saved, and if it is compressed. public DBPFEntryFSH.BitmapType Code { get; } Property Value DBPFEntryFSH.BitmapType Height Bitmap height in pixels. public ushort Height { get; set; } Property Value ushort Id Record identifier. public int Id { get; set; } Property Value int Image An image created from the first mipmap, if it exists. public Image<Rgba32> Image { get; } Property Value Image<Rgba32> Mipmaps List of embedded mipmaps in this file, if any. public List<DBPFEntryFSH.FSHImageData> Mipmaps { get; } Property Value List<DBPFEntryFSH.FSHImageData> Name Entry name. See csDBPF.DBPFEntryFSH.FSHDirectoryItem.Name. public string Name { get; set; } Property Value string Size Size of the block including this header, only used if the file contains an attachment or embedded mipmaps; it is zero otherwise. For single images this is usually: width x height + 10h(hex). For images with embedded mipmaps, this is the total size of the original image, plus all mipmaps, plus the header. In either case, it may include additional data as a binary attachment with unknown format. public int Size { get; set; } Property Value int Width Bitmap width in pixels. public ushort Width { get; set; } Property Value ushort"
  },
  "api/csDBPF.DBPFEntryFSH.FSHImageData.html": {
    "href": "api/csDBPF.DBPFEntryFSH.FSHImageData.html",
    "title": "Class DBPFEntryFSH.FSHImageData | csDBPF",
    "summary": "Class DBPFEntryFSH.FSHImageData Namespace csDBPF Assembly csDBPF.dll Contains the raw, encoded and potentially compressed image data. This is the entry point for actually getting the raw bitmap. public class DBPFEntryFSH.FSHImageData Inheritance object DBPFEntryFSH.FSHImageData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FSHImageData(BitmapType, int, int, byte[]) Contains the raw, encoded and potentially compressed image data. This is the entry point for actually getting the raw bitmap. public FSHImageData(DBPFEntryFSH.BitmapType code, int width, int height, byte[] data) Parameters code DBPFEntryFSH.BitmapType Specifies the type of compression width int Bitmap width in pixels height int Bitmap height in pixels data byte[] Compressed bitmap data Properties Bitmap Decompressed bitmap data. public byte[] Bitmap { get; } Property Value byte[] Code Specifies the type of compression for Data public DBPFEntryFSH.BitmapType Code { get; } Property Value DBPFEntryFSH.BitmapType Data Compressed bitmap data. public byte[] Data { get; } Property Value byte[] Height Bitmap height in pixels. public int Height { get; } Property Value int Width Bitmap width in pixels. public int Width { get; } Property Value int Methods Decompress() Decompresses bitmap data public void Decompress() Exceptions InvalidOperationException Data is null and cannot be decompressed. NotSupportedException Unknown bitmap format ToImage() Converts the decompressed bitmap data to a useable image format, decompressing if necessary. public Image<Rgba32> ToImage() Returns Image<Rgba32> An ImageSharp SixLabors.ImageSharp.Image<TPixel> image"
  },
  "api/csDBPF.DBPFEntryFSH.html": {
    "href": "api/csDBPF.DBPFEntryFSH.html",
    "title": "Class DBPFEntryFSH | csDBPF",
    "summary": "Class DBPFEntryFSH Namespace csDBPF Assembly csDBPF.dll An implementation of DBPFEntry for FSH entries. public class DBPFEntryFSH : DBPFEntry Inheritance object DBPFEntry DBPFEntryFSH Inherited Members DBPFEntry.TGI DBPFEntry.Offset DBPFEntry.IndexPos DBPFEntry.UncompressedSize DBPFEntry.CompressedSize DBPFEntry.IsCompressed DBPFEntry.ByteData DBPFEntry.ErrorLog DBPFEntry.ToString() DBPFEntry.MatchesEntryType(TGI) DBPFEntry.IsExemplar() DBPFEntry.GetSize() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors DBPFEntryFSH(TGI) Create a new instance. Use when creating a new FSH entry. public DBPFEntryFSH(TGI tgi) Parameters tgi TGI DBPFEntryFSH(TGI, uint, uint, uint, byte[]) Create a new instance. Use when reading an existing FSH entry from a file. public DBPFEntryFSH(TGI tgi, uint offset, uint size, uint index, byte[] bytes) Parameters tgi TGI DBPFTGI object representing the entry offset uint Offset (location) of the entry within the DBPF file size uint Compressed size of data for the entry, in bytes. Uncompressed size is also temporarily set to this to this until the data is set index uint Entry position in the file, 0-n bytes byte[] Byte data for this entry Properties Entries A FSH file may contain one or more entries, though commonly this is limited to one. public List<DBPFEntryFSH.FSHEntry> Entries { get; } Property Value List<DBPFEntryFSH.FSHEntry> Image An image created from the first entry, if it exists. public Image<Rgba32> Image { get; } Property Value Image<Rgba32> Methods Decode() Decompresses this entry and sets bitmap data from byte data. public override void Decode() Encode(bool) Build ByteData from the current state of this instance. public override void Encode(bool compress = false) Parameters compress bool Whether to compress the ByteData. Default is FALSE See Also https://www.wiki.sc4devotion.com/index.php?title=FSH_Format"
  },
  "api/csDBPF.DBPFEntryLTEXT.html": {
    "href": "api/csDBPF.DBPFEntryLTEXT.html",
    "title": "Class DBPFEntryLTEXT | csDBPF",
    "summary": "Class DBPFEntryLTEXT Namespace csDBPF Assembly csDBPF.dll An implementation of DBPFEntry for LTEXT entries. Object data is stored in Text. public class DBPFEntryLTEXT : DBPFEntry Inheritance object DBPFEntry DBPFEntryLTEXT Inherited Members DBPFEntry.TGI DBPFEntry.Offset DBPFEntry.IndexPos DBPFEntry.UncompressedSize DBPFEntry.CompressedSize DBPFEntry.IsCompressed DBPFEntry.ByteData DBPFEntry.ErrorLog DBPFEntry.ToString() DBPFEntry.MatchesEntryType(TGI) DBPFEntry.IsExemplar() DBPFEntry.GetSize() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors DBPFEntryLTEXT() Create a new instance. Use when creating a new LTEXT entry. public DBPFEntryLTEXT() DBPFEntryLTEXT(string) Create a new instance with the specified text. Use when creating a new LTEXT entry from scratch. public DBPFEntryLTEXT(string text) Parameters text string Text to set DBPFEntryLTEXT(TGI) Create a new instance with the specified TGI. Use when creating a new LTEXT entry from scratch. public DBPFEntryLTEXT(TGI tgi) Parameters tgi TGI TGI set to assign DBPFEntryLTEXT(TGI, string) Create a new instance with the specified TGI and text. Use when creating a new LTEXT entry from scratch. public DBPFEntryLTEXT(TGI tgi, string text) Parameters tgi TGI TGI set to assign text string Text to set DBPFEntryLTEXT(TGI, uint, uint, uint, byte[]) Create a new instance. Use when reading an existing entry from a file. public DBPFEntryLTEXT(TGI tgi, uint offset, uint size, uint index, byte[] bytes) Parameters tgi TGI DBPFTGI object representing the entry offset uint Offset (location) of the entry within the DBPF file size uint Compressed size of data for the entry, in bytes. Uncompressed size is also temporarily set to this to this until the data is set index uint Entry position in the file, 0-n bytes byte[] Byte data for this entry Properties Text Text string for this entry. public string Text { get; set; } Property Value string Methods Decode() Decodes the LTEXT string from raw data and sets the Text property of this instance. public override void Decode() Remarks Data must be uncompressed or garbage data is returned. Encode(bool) Build and compress ByteData from the current state of this instance. public override void Encode(bool compress = false) Parameters compress bool Whether to compress the entry"
  },
  "api/csDBPF.DBPFEntryPNG.html": {
    "href": "api/csDBPF.DBPFEntryPNG.html",
    "title": "Class DBPFEntryPNG | csDBPF",
    "summary": "Class DBPFEntryPNG Namespace csDBPF Assembly csDBPF.dll An implementation of DBPFEntry for PNG entries. Object data is stored in PNGImage. public class DBPFEntryPNG : DBPFEntry Inheritance object DBPFEntry DBPFEntryPNG Inherited Members DBPFEntry.TGI DBPFEntry.Offset DBPFEntry.IndexPos DBPFEntry.UncompressedSize DBPFEntry.CompressedSize DBPFEntry.IsCompressed DBPFEntry.ByteData DBPFEntry.ErrorLog DBPFEntry.ToString() DBPFEntry.MatchesEntryType(TGI) DBPFEntry.IsExemplar() DBPFEntry.GetSize() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors DBPFEntryPNG(TGI) Create a new instance. Use when creating a new exemplar. public DBPFEntryPNG(TGI tgi) Parameters tgi TGI TGI set to assign DBPFEntryPNG(TGI, uint, uint, uint, byte[]) Create a new instance. Use when reading an existing image from a file. public DBPFEntryPNG(TGI tgi, uint offset, uint size, uint index, byte[] bytes) Parameters tgi TGI TGI object representing the entry offset uint Offset (location) of the entry within the DBPF file size uint Compressed size of data for the entry, in bytes. Uncompressed size is also temporarily set to this to this until the data is set index uint Entry position in the file, 0-n bytes byte[] Byte data for this entry Properties PNGImage PNG image in this entry. public Image PNGImage { get; } Property Value Image Methods Decode() Sets the PNGImage property from this entry's byte sequence. public override void Decode() Remarks Use when reading from a file. Encode(bool) Build ByteData from the current state of PNGImage. public override void Encode(bool compress = false) Parameters compress bool This has no effect as PNG entries are always uncompressed SaveImage(string) Saves this image to a file. public void SaveImage(string path) Parameters path string File path to save to SetImage(Image) Set this entry's image to an existing Image. public void SetImage(Image img) Parameters img Image Image to use SetImage(string) Set this entry's image to an image loaded from a file. public void SetImage(string path) Parameters path string File path to load from"
  },
  "api/csDBPF.DBPFError.html": {
    "href": "api/csDBPF.DBPFError.html",
    "title": "Struct DBPFError | csDBPF",
    "summary": "Struct DBPFError Namespace csDBPF Assembly csDBPF.dll Details an error encountered when parsing a DBPF file. public struct DBPFError Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors DBPFError(string, TGI, string) Details an error encountered when parsing a DBPF file. public DBPFError(string fileName, TGI tgi, string message) Parameters fileName string tgi TGI message string Fields FileName Name of the current DBPF file public string FileName Field Value string Message Error message public string Message Field Value string TGI TGI of the current subfile public TGI TGI Field Value TGI"
  },
  "api/csDBPF.DBPFFile.html": {
    "href": "api/csDBPF.DBPFFile.html",
    "title": "Class DBPFFile | csDBPF",
    "summary": "Class DBPFFile Namespace csDBPF Assembly csDBPF.dll Contains the header data and all entries for a DBPF file. public class DBPFFile Inheritance object DBPFFile Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks At a high level, a DBPFFile (\"file\") is the container for the DBPF data, and takes the form of a .dat/.sc4lot/.sc4model/.sc4desc file. The main components of the file include the Header, which stores key information about the file itself, and the ListOfTGIs and ListOfEntries, which contain the data data about the contents of the file. Each DBPFFile is broken into one or more DBPFEntry (\"entries\" or \"subfiles\"), which inform what kind of data the entry stores and how it should be interpreted. • Exemplar and Cohort type entries are composed of one or more DBPFProperty (\"properties\"). Each property corresponds to one of XMLExemplarProperty which are generated from the properties XML file. • All other types of entries have their data interpreted directly from its byte array. This process varies depending on the type of entry (text, bitmap, xml, etc.). The data for a particular entry or property will remain in its raw byte form until a DecodeEntry() or DecodeProperty() function is called to translate the byte data into a \"friendly\" format. Constructors DBPFFile() Instantiates a new DBPFFile from scratch. public DBPFFile() DBPFFile(FileStream) Instantiates a DBPFFile from a file stream. If the file exists, its contents are read into the new DBPFFile; if the file does not exist, a new DBPF file is created. public DBPFFile(FileStream stream) Parameters stream FileStream File to read DBPFFile(string) Instantiates a DBPFFile from a file path. If the file exists, its contents are read into the new DBPFFile. public DBPFFile(string filePath) Parameters filePath string File to read Properties DataSize Size of all entries in this file, in bytes. public long DataSize { get; } Property Value long Remarks This does not include the size allocated for the Header (96 bytes) or the Index (entry count * 20 bytes). ErrorLog Gets a list of issues encountered when parsing this file. public List<DBPFError> ErrorLog { get; } Property Value List<DBPFError> Remarks Each entry additionally stores its own error log. File Represents a file system object for this DBPF file. public FileInfo File { get; } Property Value FileInfo Header Stores key information about the DBPFFile. Is the first 96 bytes of the file. public DBPFHeader Header { get; } Property Value DBPFHeader ListOfEntries Gets a list of all entries in this file. public List<DBPFEntry> ListOfEntries { get; } Property Value List<DBPFEntry> ListOfTGIs Gets a list of all TGI sets in this file. public List<TGI> ListOfTGIs { get; } Property Value List<TGI> Remarks Can be used for quick inspection of a file's contents as no entry data is processed, meaning this information is available before entries have been decoded. Methods AddEntries(IEnumerable<DBPFEntry>) Add multiple entries to this file. public void AddEntries(IEnumerable<DBPFEntry> entries) Parameters entries IEnumerable<DBPFEntry> Entries to add AddEntry(DBPFEntry) Add an entry to this file. public void AddEntry(DBPFEntry entry) Parameters entry DBPFEntry Entry to add AddOrUpdateEntries(IEnumerable<DBPFEntry>) Add each entry to this file if a matching TGI is not found, otherwise update the corresponding entry. public void AddOrUpdateEntries(IEnumerable<DBPFEntry> entries) Parameters entries IEnumerable<DBPFEntry> Entries to add AddOrUpdateEntry(DBPFEntry) Add the entry to this file if a matching TGI is not found, otherwise update the corresponding entry. public void AddOrUpdateEntry(DBPFEntry entry) Parameters entry DBPFEntry Entry to add CountEntries() Returns the count of entries in this file. public int CountEntries() Returns int The count of entries CountTGIs() Returns the count of TGIs in this file. public int CountTGIs() Returns int The count of TGI sets Remarks This may be used in lieu of CountEntries() for more performant operation if no entry data is required. DecodeAllEntries() Decompresses (if necessary) and decodes all entries in the file. public void DecodeAllEntries() Remarks For more information, see Decode() and the specific implementations for each entry type. EncodeAllEntries() public void EncodeAllEntries() GetEntry(int) Return the nth entry in the file by index. 0-based index. public DBPFEntry GetEntry(int index) Parameters index int Index position in file. Returns DBPFEntry The nth DBPFEntry GetEntry(uint) Return the first entry matching the specified Instance ID. public DBPFEntry GetEntry(uint instance) Parameters instance uint IID to search for Returns DBPFEntry A matching DBPFEntry GetEntry(TGI) Return the first entry matching the specified TGI. public DBPFEntry GetEntry(TGI TGI) Parameters TGI TGI TGI set to search for Returns DBPFEntry A matching DBPFEntry RebuildDirectory() Builds the Directory subfile if any entries in this file are compressed. public void RebuildDirectory() RemoveAllEntries() Clears all entries from this file. public void RemoveAllEntries() RemoveEntries(TGI) public void RemoveEntries(TGI tgi) Parameters tgi TGI RemoveEntry(int) Remove the entry at the specified position from this file. public void RemoveEntry(int position) Parameters position int Entry position to remove RemoveEntry(TGI) Remove the entry matching the specified TGI from this file. public void RemoveEntry(TGI tgi) Parameters tgi TGI Entry TGI to remove Remarks If more than one entry matches the given TGI then no entries are removed. Save() Saves the current instance to disk using the File property. public void Save() SaveAs(string) Saves the current instance to disk at the specified path. File to save as public void SaveAs(string filePath) Parameters filePath string SortEntries() public void SortEntries() ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. UpdateAllEntries(IEnumerable<DBPFEntry>) public void UpdateAllEntries(IEnumerable<DBPFEntry> entries) Parameters entries IEnumerable<DBPFEntry> UpdateEntry(int) public void UpdateEntry(int index) Parameters index int UpdateEntry(DBPFEntry) public void UpdateEntry(DBPFEntry entry) Parameters entry DBPFEntry"
  },
  "api/csDBPF.DBPFFileExtensions.html": {
    "href": "api/csDBPF.DBPFFileExtensions.html",
    "title": "Class DBPFFileExtensions | csDBPF",
    "summary": "Class DBPFFileExtensions Namespace csDBPF Assembly csDBPF.dll A set of extension methods for working with DBPF items public static class DBPFFileExtensions Inheritance object DBPFFileExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DecodeEntries(IEnumerable<DBPFEntry>) Decode all entries in the given list public static void DecodeEntries(this IEnumerable<DBPFEntry> entries) Parameters entries IEnumerable<DBPFEntry> List of entries to decode EncodeEntries(IEnumerable<DBPFEntry>) Encode all entries in the given list public static void EncodeEntries(this IEnumerable<DBPFEntry> entries) Parameters entries IEnumerable<DBPFEntry> List of entries to encode"
  },
  "api/csDBPF.DBPFHeader.html": {
    "href": "api/csDBPF.DBPFHeader.html",
    "title": "Class DBPFHeader | csDBPF",
    "summary": "Class DBPFHeader Namespace csDBPF Assembly csDBPF.dll Stores key information about the DBPFFile. The Header is the first 96 bytes of the DBPFFile. public class DBPFHeader Inheritance object DBPFHeader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties DateCreated Creation time in Unix timestamp format. public uint DateCreated { get; } Property Value uint DateModified Modification time in Unix timestamp format. public uint DateModified { get; } Property Value uint Identifier File type identifier. Must be \"DBPF\". public string Identifier { get; } Property Value string IndexEntryCount Number of subfiles within this file. public uint IndexEntryCount { get; } Property Value uint Remarks The index table is very similar to the directory file (DIR) within a DPBF package. The difference being that the Index Table lists every file in the package, whereas the directory file only lists the compressed files within the package. IndexEntryOffset Byte location of the first index entry in the file. public uint IndexEntryOffset { get; } Property Value uint IndexMajorVersion Defines the Index version. Always 7 for SC4. public uint IndexMajorVersion { get; } Property Value uint IndexSize Size of the index table in bytes. Equivalent to IndexEntryCount * 20 bytes. public uint IndexSize { get; } Property Value uint MajorVersion DBPF format major version. Always 1 for SC4. public uint MajorVersion { get; } Property Value uint MinorVersion DBPF format minor version. Always 0 for SC4. public uint MinorVersion { get; } Property Value uint Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/csDBPF.DBPFProperty.ExemplarType.html": {
    "href": "api/csDBPF.DBPFProperty.ExemplarType.html",
    "title": "Enum DBPFProperty.ExemplarType | csDBPF",
    "summary": "Enum DBPFProperty.ExemplarType Namespace csDBPF Assembly csDBPF.dll Defines the type of exemplar and what game systems or components the exemplar contains info for. public enum DBPFProperty.ExemplarType Fields Aircraft = 24 Aircraft Exemplars. Used to reference aircraft automata Audio = 37 Audio Exemplars. AutomataTuning = 32 Automata Tuning Exemplars. Bridge = 7 Bridge Exemplars. These are used to specify bridge properties. Building = 2 Building Exemplars. These contain properties related to buildings. Construction = 31 Construction Exemplars. Crime = 36 Crime Exemplars. DataView = 35 DataView Exemplars. Developer = 4 Developer Exemplars. Disaster = 34 Disaster Exemplars Error = -1 Error reading type or type is not present. FloraFauna = 15 Flora/Fauna Exemplars. Foundation = 17 Foundation Exemplars. GodMode = 39 God Mode Exemplars. GraphControl = 43 Graph Control Exemplars. Highway = 11 Highway Exemplars, used to reference transit models. They are among the most important exemplars used in the transit-modding world. Virtually all NAM Puzzle Pieces, as well as draggable model-based functionality, as exemplified by the High Speed Rail mod, use Type 0B exemplars. Lighting = 19 Lighting Exemplars. LotConfiguration = 16 LotConfiguration and Building Exemplars, and are used to specify the location of props, textures and buildings on Lots, along with other properties. Type 10 Exemplars for plopped buildings are stored in a city's Savefile upon save. LotRetianingWall = 21 LotRetainingWall Exemplars. MayorMode = 40 Mayor Mode Exemplars. MiscNetwork = 8 Misc Network Exemplars. NetworkLot = 33 Network Lots, often referred to as T21 Exemplars. Used to add props rendered in BAT (isometric) to networks, such as traffic lights and lamp posts. These exemplars differ from Lot Exemplars (T10) in that they don't allow for base or overlay textures and can't be Transit Enabled. Ordinance = 14 Ordinance Exemplars. Pedestrian = 23 Pedestrian Exemplars. Used to reference pedestrian automata. PowerLine = 12 Power line Exemplars. Prop = 30 Prop Exemplars. RCI = 3 RCI Exemplars. Rail = 10 Rail Exemplars. Road = 6 Road Exemplars. These are generally used for tunnel entrance models. Simulator = 5 Simulator Exemplars. These are among the most critical to game functionality, and include among them the Demand Simulator and the Traffic Simulator. T00 = 0 The use of T00 exemplars is relatively unknown. Terrain = 13 Terrain Exemplars. TrendBar = 42 Trend Bar Exemplars. Tuning = 1 Tuning Exemplars. These control various game properties such as transit network slopes. UnknownType = 9 Unknown type. Vehicle = 22 Vehicle Exemplars. Used to reference automata."
  },
  "api/csDBPF.DBPFProperty.LotConfigPropertyLotObjectType.html": {
    "href": "api/csDBPF.DBPFProperty.LotConfigPropertyLotObjectType.html",
    "title": "Enum DBPFProperty.LotConfigPropertyLotObjectType | csDBPF",
    "summary": "Enum DBPFProperty.LotConfigPropertyLotObjectType Namespace csDBPF Assembly csDBPF.dll The first rep (0) of a LotConfigPropertyLotObject describes its object type. public enum DBPFProperty.LotConfigPropertyLotObjectType Fields Building = 0 Defines position and IID reference of building exemplar. [Obsolete(\"Not implemented in SC4.\")] Fence = 3 Not implemented currently. Flora = 4 Defines position, and IID reference of a flora/growable tree exemplar. LandConstraint = 6 Defines a land constraint tile. NetworkNode = 7 Defines transit connections and automata paths. Prop = 1 Defines position and IID reference of a prop exemplar. Texture = 2 Defines position and IID reference of a base or overlay texture. WaterConstraint = 5 Defines a water constraint tile."
  },
  "api/csDBPF.DBPFProperty.LotConfigPropertyPurposeType.html": {
    "href": "api/csDBPF.DBPFProperty.LotConfigPropertyPurposeType.html",
    "title": "Enum DBPFProperty.LotConfigPropertyPurposeType | csDBPF",
    "summary": "Enum DBPFProperty.LotConfigPropertyPurposeType Namespace csDBPF Assembly csDBPF.dll Defines the RCI type for a lot. public enum DBPFProperty.LotConfigPropertyPurposeType Fields Agriculture = 5 Agriculture (AG) CommercialOffice = 3 Commercial Office (CO) CommercialService = 2 Commercial Service (CS). IndustryDirty = 6 Industrial Dirty (ID) IndustryHighTech = 8 Industial High Tech (IHT) IndustryMfg = 7 Industrial Manufacturing (IM) None = 0 None. Residential = 1 Residential (R)."
  },
  "api/csDBPF.DBPFProperty.LotConfigPropertyRoadRequirement.html": {
    "href": "api/csDBPF.DBPFProperty.LotConfigPropertyRoadRequirement.html",
    "title": "Enum DBPFProperty.LotConfigPropertyRoadRequirement | csDBPF",
    "summary": "Enum DBPFProperty.LotConfigPropertyRoadRequirement Namespace csDBPF Assembly csDBPF.dll Defines the road orientation for a lot. public enum DBPFProperty.LotConfigPropertyRoadRequirement Fields LeftCorner = 9 Front and left road requirement. Normal = 8 Front road requirement. RightCorner = 12 Front and right road requirement."
  },
  "api/csDBPF.DBPFProperty.LotConfigPropertyWealthType.html": {
    "href": "api/csDBPF.DBPFProperty.LotConfigPropertyWealthType.html",
    "title": "Enum DBPFProperty.LotConfigPropertyWealthType | csDBPF",
    "summary": "Enum DBPFProperty.LotConfigPropertyWealthType Namespace csDBPF Assembly csDBPF.dll Defines the wealth for a lot. public enum DBPFProperty.LotConfigPropertyWealthType Fields High = 3 High Wealth ($$$) Low = 1 Low Wealth ($) Medium = 2 Medium Wealth ($$) None = 0 No wealth (civic, landmark, etc.)."
  },
  "api/csDBPF.DBPFProperty.LotConfigPropertyZoneType.html": {
    "href": "api/csDBPF.DBPFProperty.LotConfigPropertyZoneType.html",
    "title": "Enum DBPFProperty.LotConfigPropertyZoneType | csDBPF",
    "summary": "Enum DBPFProperty.LotConfigPropertyZoneType Namespace csDBPF Assembly csDBPF.dll Defines the zone type for a lot - which type of zones the lot will grow on or was plopped as. public enum DBPFProperty.LotConfigPropertyZoneType Fields Agriculture = 7 Agricultrual zones. Airport = 11 Airport plopped. CivicPlopped = 15 Civic plopped. HighDensityC = 6 High density commercial zones. HighDensityI = 9 High density industrial zones. HighDensityR = 3 High density residential zones. Landmark = 14 Landmark plopped. LowDensityC = 4 Low density commercial zones. LowDensityR = 1 Low density residential zones. MediumDensityC = 5 Medium density commercial zones. MediumDensityI = 8 Medium density industrial zones. MediumDensityR = 2 Medium density residential zones. Military = 10 Military plopped. None = 0 None Seaport = 12 Seaport plopped. SpacePort = 13 Spaceport plopped."
  },
  "api/csDBPF.DBPFProperty.PropertyDataType.html": {
    "href": "api/csDBPF.DBPFProperty.PropertyDataType.html",
    "title": "Enum DBPFProperty.PropertyDataType | csDBPF",
    "summary": "Enum DBPFProperty.PropertyDataType Namespace csDBPF Assembly csDBPF.dll This class stores information related to the possible data types for properties. public enum DBPFProperty.PropertyDataType Fields BOOL = 2816 Equivalent to System.Boolean FLOAT32 = 2304 Equivalent to System.Double SINT32 = 1792 Equivalent to System.Int32 SINT64 = 2048 Equivalent to System.Int64 STRING = 3072 Equivalent to System.String UINT16 = 512 Equivalent to System.UInt16 UINT32 = 768 Equivalent to System.UInt32 UINT8 = 256 Equivalent to System.Byte UNKNOWN = 0 Unknown type. Equivalent to null Remarks See Value Types."
  },
  "api/csDBPF.DBPFProperty.html": {
    "href": "api/csDBPF.DBPFProperty.html",
    "title": "Class DBPFProperty | csDBPF",
    "summary": "Class DBPFProperty Namespace csDBPF Assembly csDBPF.dll An abstract class defining the structure of a Property and the methods for interfacing with it. This class is only relevant for Exemplar and Cohort type entries. public abstract class DBPFProperty Inheritance object DBPFProperty Derived DBPFPropertyFloat DBPFPropertyLong DBPFPropertyString Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DataType The DBPFProperty.PropertyDataType for this property. public abstract DBPFProperty.PropertyDataType DataType { get; } Property Value DBPFProperty.PropertyDataType Encoding Specifies the encoding style (Binary or Text) of the property. public abstract DBPFEntry.EncodingType Encoding { get; set; } Property Value DBPFEntry.EncodingType Remarks May affect implementation of other fields, namely NumberOfReps. Property is presented so the default value (false) will be binary encoding which we want to use most of the time. ID Hexadecimal identifier for this property. XMLExemplarProperty and AllProperties. public abstract uint ID { get; set; } Property Value uint NumberOfReps The number of repetitions of DBPFProperty.PropertyDataType this property has. This informs (in part) how many bytes to read for this property. Initialized to 0. public abstract int NumberOfReps { get; } Property Value int Remarks Determining the count partially depends on the encoding type. For binary encoded string type: length of string. For text encoded string type: always 1. For binary encoded (all) and text encoded number types (except float): 0 reps = single value, 1 reps = multiple values but currently held to 1 value (problematic on macOS when the DataType is float), n reps = n number of values. For text encoded float type: n reps = n number of values. This property is necessary because of uneven implementation of the DataValues property in implementing types. Methods GetData() Returns the values(s) stored in this property. public abstract IEnumerable GetData() Returns IEnumerable An array of string, long, or float values. This is specified via the DataType property GetData(int) Returns the value stored in this property at the given position. public abstract object GetData(int position) Parameters position int Returns object A single string, long, or float value. This is specified via the DataType property LookupDataType(string) Lookup the data type from a string representation. public static DBPFProperty.PropertyDataType LookupDataType(string type) Parameters type string Property data type name Returns DBPFProperty.PropertyDataType The corresponding PropertyDataType LookupDataTypeLength(PropertyDataType) Lookup the length in bytes of a PropertyDataType. public static int LookupDataTypeLength(DBPFProperty.PropertyDataType dt) Parameters dt DBPFProperty.PropertyDataType Property data type Returns int Length in bytes LookupDataTypeName(PropertyDataType) Lookup the string representation of a PropertyDataType public static string LookupDataTypeName(DBPFProperty.PropertyDataType dt) Parameters dt DBPFProperty.PropertyDataType Property data type Returns string A string representation SetData(IEnumerable) Set the values(s) stored in this property. public abstract void SetData(IEnumerable value) Parameters value IEnumerable A string or set of numeric value(s) ToBytes() Process the features and data values of this property into a byte array according to the set encoding type. public abstract byte[] ToBytes() Returns byte[] A byte array encoding all information for this property"
  },
  "api/csDBPF.DBPFPropertyFloat.html": {
    "href": "api/csDBPF.DBPFPropertyFloat.html",
    "title": "Class DBPFPropertyFloat | csDBPF",
    "summary": "Class DBPFPropertyFloat Namespace csDBPF Assembly csDBPF.dll Represents a property storing float value(s). public class DBPFPropertyFloat : DBPFProperty Inheritance object DBPFProperty DBPFPropertyFloat Inherited Members DBPFProperty.LookupDataType(string) DBPFProperty.LookupDataTypeName(DBPFProperty.PropertyDataType) DBPFProperty.LookupDataTypeLength(DBPFProperty.PropertyDataType) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors DBPFPropertyFloat(List<float>, EncodingType) Construct a DBPFProperty with a float data type holding multiple values. public DBPFPropertyFloat(List<float> values, DBPFEntry.EncodingType encodingType = EncodingType.Binary) Parameters values List<float> Values this property holds encodingType DBPFEntry.EncodingType Text or Binary encoding type DBPFPropertyFloat(float, EncodingType) Construct a DBPFProperty with a float data type holding a single value. public DBPFPropertyFloat(float value, DBPFEntry.EncodingType encodingType = EncodingType.Binary) Parameters value float Value of this property encodingType DBPFEntry.EncodingType Text or Binary encoding type DBPFPropertyFloat(EncodingType) Construct a new DBPFProperty with a float data type. public DBPFPropertyFloat(DBPFEntry.EncodingType encodingType = EncodingType.Binary) Parameters encodingType DBPFEntry.EncodingType Text or Binary encoding type Properties DataType The data type for this property. public override DBPFProperty.PropertyDataType DataType { get; } Property Value DBPFProperty.PropertyDataType Encoding Specifies the encoding style (Binary or Text) of the property. public override DBPFEntry.EncodingType Encoding { get; set; } Property Value DBPFEntry.EncodingType Remarks This property affects NumberOfReps. This also determines how this property will be written to file. ID Hexadecimal identifier for this property. XMLExemplarProperty and AllProperties. public override uint ID { get; set; } Property Value uint NumberOfReps The number of repetitions of DataType this property has. This informs (in part) how many bytes to read for this property. Initialized to 0. public override int NumberOfReps { get; } Property Value int Remarks Determining the count partially depends on the encoding type. For binary encoded float-type properties: 0 reps = single value, 1 reps = multiple values but currently held to 1 value (problematic on macOS), n reps = n number of values. For text encoded float-type properties: n reps = n number of values. Methods GetData() Returns a list of data values which are stored in this property. public override IEnumerable GetData() Returns IEnumerable List of data values which are stored in this property GetData(int) Returns the value stored in this property at the given position. public override ValueType GetData(int position) Parameters position int Position (or rep) to return Returns ValueType The data value at the specified position Remarks If the position parameter is greater than the number of values, the last value is returned. SetData(IEnumerable) Set the data values stored in this property. Value should be of type IEnumerable<float>. public override void SetData(IEnumerable value) Parameters value IEnumerable Values to set Exceptions ArgumentException Argument to DBPFPropertyFloat.SetData must be IEnumerable<float>. ToBytes() Process the features and data values of this property into a byte array according to the set encoding type. public override byte[] ToBytes() Returns byte[] A byte array encoding all information for this property ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/csDBPF.DBPFPropertyLong.html": {
    "href": "api/csDBPF.DBPFPropertyLong.html",
    "title": "Class DBPFPropertyLong | csDBPF",
    "summary": "Class DBPFPropertyLong Namespace csDBPF Assembly csDBPF.dll Represents a property storing integer-based value(s). public class DBPFPropertyLong : DBPFProperty Inheritance object DBPFProperty DBPFPropertyLong Inherited Members DBPFProperty.LookupDataType(string) DBPFProperty.LookupDataTypeName(DBPFProperty.PropertyDataType) DBPFProperty.LookupDataTypeLength(DBPFProperty.PropertyDataType) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks All numbers are stored internally as long (equal to largest used DBPFPropertyDataType of SINT64). The actual underlying data type is defined by the DBPFProperty.PropertyDataType. Constructors DBPFPropertyLong(PropertyDataType, List<long>, EncodingType) Construct a DBPFProperty with a numerical data type holding multiple values. public DBPFPropertyLong(DBPFProperty.PropertyDataType dataType, List<long> values, DBPFEntry.EncodingType encodingType = EncodingType.Binary) Parameters dataType DBPFProperty.PropertyDataType Data type of this property values List<long> Values this property holds encodingType DBPFEntry.EncodingType Text or Binary encoding type Exceptions ArgumentException DBPFPropertyNumber cannot contain float or string data. DBPFPropertyLong(PropertyDataType, long, EncodingType) Construct a DBPFProperty with a numerical data type holding a single value. public DBPFPropertyLong(DBPFProperty.PropertyDataType dataType, long value, DBPFEntry.EncodingType encodingType = EncodingType.Binary) Parameters dataType DBPFProperty.PropertyDataType Data type of this property value long Value of this property encodingType DBPFEntry.EncodingType Text or Binary encoding type Exceptions ArgumentException DBPFPropertyNumber cannot contain float or string data. DBPFPropertyLong(PropertyDataType, EncodingType) Construct a DBPFProperty with a numerical data type. public DBPFPropertyLong(DBPFProperty.PropertyDataType dataType, DBPFEntry.EncodingType encodingType = EncodingType.Binary) Parameters dataType DBPFProperty.PropertyDataType Data type of this property encodingType DBPFEntry.EncodingType Text or Binary encoding type Exceptions ArgumentException DBPFPropertyNumber cannot contain float or string data. Properties DataType The DBPFProperty.PropertyDataType for this property. public override DBPFProperty.PropertyDataType DataType { get; } Property Value DBPFProperty.PropertyDataType Encoding Specifies the encoding style (Binary or Text) of the property. public override DBPFEntry.EncodingType Encoding { get; set; } Property Value DBPFEntry.EncodingType Remarks This only determines how this property will be written to file. No properties of this instance are affected by this. ID Hexadecimal identifier for this property. XMLExemplarProperty and AllProperties. public override uint ID { get; set; } Property Value uint NumberOfReps The number of repetitions of DBPFProperty.PropertyDataType this property has. This informs (in part) how many bytes to read for this property. Initialized to 0. public override int NumberOfReps { get; } Property Value int Remarks 0 reps = single value; n reps = n number of values. Methods GetData() Returns a list of data values which are stored in this property. public override long[] GetData() Returns long[] List of data values which are stored in this property GetData(int) Returns the value stored in this property at the given position. public override object GetData(int position) Parameters position int Position (or rep) to return Returns object The data value at the specified position Remarks If the position parameter is greater than the number of values, the last value is returned instead. SetData(IEnumerable) Set the data values stored in this property. Value should be of type IEnumerable<long>. public override void SetData(IEnumerable value) Parameters value IEnumerable Values to set Exceptions ArgumentException Argument to DBPFPropertyNumber.SetData must be IEnumerable<long>;. ToBytes() Process the features and data values of this property into a byte array according to the set encoding type. public override byte[] ToBytes() Returns byte[] A byte array encoding all information for this property ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/csDBPF.DBPFPropertyString.html": {
    "href": "api/csDBPF.DBPFPropertyString.html",
    "title": "Class DBPFPropertyString | csDBPF",
    "summary": "Class DBPFPropertyString Namespace csDBPF Assembly csDBPF.dll Represents a property storing a string value. public class DBPFPropertyString : DBPFProperty Inheritance object DBPFProperty DBPFPropertyString Inherited Members DBPFProperty.LookupDataType(string) DBPFProperty.LookupDataTypeName(DBPFProperty.PropertyDataType) DBPFProperty.LookupDataTypeLength(DBPFProperty.PropertyDataType) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors DBPFPropertyString(string, EncodingType) Construct a DBPFProperty with a string data type holding a specified string. public DBPFPropertyString(string value, DBPFEntry.EncodingType encodingType = EncodingType.Binary) Parameters value string String to set encodingType DBPFEntry.EncodingType Text or Binary encoding type DBPFPropertyString(EncodingType) Construct a new DBPFProperty with a string data type. public DBPFPropertyString(DBPFEntry.EncodingType encodingType = EncodingType.Binary) Parameters encodingType DBPFEntry.EncodingType Text or Binary encoding type Properties DataType The DBPFProperty.PropertyDataType for this property. public override DBPFProperty.PropertyDataType DataType { get; } Property Value DBPFProperty.PropertyDataType Encoding Specifies the encoding style (Binary or Text) of the property. public override DBPFEntry.EncodingType Encoding { get; set; } Property Value DBPFEntry.EncodingType Remarks This property affects NumberOfReps. This also determines how this property will be written to file. ID Hexadecimal identifier for this property. XMLExemplarProperty and AllProperties. public override uint ID { get; set; } Property Value uint NumberOfReps The number of repetitions of DBPFProperty.PropertyDataType this property has. This informs (in part) how many bytes to read for this property. Initialized to 0. public override int NumberOfReps { get; } Property Value int Remarks Determining the count partially depends on the encoding type. For binary encoded string-type properties: length of string. For text encoded string-type properties: always 1. Methods GetData() Returns the data value stored in this property. public override string GetData() Returns string The data value stored in this property GetData(int) Returns the value stored in this property at the given position. public override string GetData(int position) Parameters position int Position (or rep) to return Returns string The data value at the specified position Remarks The position parameter is ignored because type DBPFPropertyString only stores one string as its data. SetData(IEnumerable) Set the data value stored in this property. Value should be of type string. public override void SetData(IEnumerable value) Parameters value IEnumerable String to set Exceptions ArgumentException Argument to DBPFPropertyString.SetData must be string. ToBytes() Process the features and data values of this property into a byte array according to the set encoding type. public override byte[] ToBytes() Returns byte[] A byte array encoding all information for this property ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/csDBPF.DBPFTGI.html": {
    "href": "api/csDBPF.DBPFTGI.html",
    "title": "Class DBPFTGI | csDBPF",
    "summary": "Class DBPFTGI Namespace csDBPF Assembly csDBPF.dll A DBPFTGI encapsulates a Type, Group, Instance identifier. public static class DBPFTGI Inheritance object DBPFTGI Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Common known entry types are listed in csDBPF.DBPFTGI.KnownEntries. Fields BLANKTGI BLANKTGI (0, 0, 0) public static readonly TGI BLANKTGI Field Value TGI COHORT Cohort file (0x05342861, #, #) public static readonly TGI COHORT Field Value TGI DIRECTORY Directory file (0xe86b1eef, 0xe86b1eef, 0x286b1f03) public static readonly TGI DIRECTORY Field Value TGI EFFDIR Effect Directory file (0xea5118b0, #, #) public static readonly TGI EFFDIR Field Value TGI EXEMPLAR Exemplar file: LotInfo, LotConfig (0x6534284a, #, #) public static readonly TGI EXEMPLAR Field Value TGI EXEMPLAR_AVENUE Exemplar file: avenue network (0x6534284a, 0xcb730fac, #) public static readonly TGI EXEMPLAR_AVENUE Field Value TGI EXEMPLAR_DIRTROAD Exemplar file: dirt road/ANT/RHW network (0x6534284a, 0x6be08658, #) public static readonly TGI EXEMPLAR_DIRTROAD Field Value TGI EXEMPLAR_GROUNDHIGHWAY Exemplar file: ground highway network (0x6534284a, 0xebe084d1, #) public static readonly TGI EXEMPLAR_GROUNDHIGHWAY Field Value TGI EXEMPLAR_HIGHWAY Exemplar file: elevated highway network (0x6534284a, 0xa8434037, #) public static readonly TGI EXEMPLAR_HIGHWAY Field Value TGI EXEMPLAR_LIGHTRAIL Exemplar file: light rail network (0x6534284a, 0x2b79dffb, #) public static readonly TGI EXEMPLAR_LIGHTRAIL Field Value TGI EXEMPLAR_MONORAIL Exemplar file: monorail network (0x6534284a, 0xebe084c2, #) public static readonly TGI EXEMPLAR_MONORAIL Field Value TGI EXEMPLAR_ONEWAYROAD Exemplar file: one-way road network (0x6534284a, 0xcbe084cb, #) public static readonly TGI EXEMPLAR_ONEWAYROAD Field Value TGI EXEMPLAR_POWERPOLE Exemplar file: power poles network (0x6534284a, 0x088e1962, #) public static readonly TGI EXEMPLAR_POWERPOLE Field Value TGI EXEMPLAR_RAIL Exemplar file: rail network (0x6534284a, 0xe8347989, #) public static readonly TGI EXEMPLAR_RAIL Field Value TGI EXEMPLAR_ROAD Exemplar file: road network (0x6534284a, 0x2821ed93, #) public static readonly TGI EXEMPLAR_ROAD Field Value TGI EXEMPLAR_STREET Exemplar file: street network (0x6534284a, 0xa92a02ea, #) public static readonly TGI EXEMPLAR_STREET Field Value TGI EXEMPLAR_T21 Exemplar file: Type 21 (0x6534284a, 0x89AC5643, #) public static readonly TGI EXEMPLAR_T21 Field Value TGI FSH FSH file: Textures (0x7ab50e44, #, #) public static readonly TGI FSH Field Value TGI FSH_ANIM_NONPROPS FSH file: Animation Sprites (Non Props) (0x7ab50e44, 0x49a593e7, #) public static readonly TGI FSH_ANIM_NONPROPS Field Value TGI FSH_ANIM_PROPS FSH file: Animation Sprites (Props) (0x7ab50e44, 0x2a2458f9, #) public static readonly TGI FSH_ANIM_PROPS Field Value TGI FSH_BASE_OVERLAY FSH file: Base and Overlay Lot Textures (0x7ab50e44, 0x0986135e, #) public static readonly TGI FSH_BASE_OVERLAY Field Value TGI FSH_MISC FSH file: Transit Textures/Buildings/Bridges/Misc (0x7ab50e44, 0x1abe787d, #) public static readonly TGI FSH_MISC Field Value TGI FSH_SHADOW FSH file: Transit Network Shadows (Masks) (0x7ab50e44, 0x2BC2759a, #) public static readonly TGI FSH_SHADOW Field Value TGI FSH_TERRAIN_FOUNDATION FSH file: Terrain And Foundations (0x7ab50e44, 0x891b0e1a, #) public static readonly TGI FSH_TERRAIN_FOUNDATION Field Value TGI FSH_TRANSIT FSH file: Transit Textures/Buildings/Bridges/Misc (0x7ab50e44, 0x1abe787d, #) [Obsolete(\"Use FISH_MISC instead.\")] public static readonly TGI FSH_TRANSIT Field Value TGI FSH_UI FSH file: User Interface Images (0x7ab50e44, 0x46a006b#, #) public static readonly TGI FSH_UI Field Value TGI INI INI file (#, 0x8a5971c5, #) public static readonly TGI INI Field Value TGI INI_FONT Font Table INI (#, 0x4a87bfe8, 0x2a87bffc) public static readonly TGI INI_FONT Field Value TGI INI_NETWORK Network INI: Remapping, Bridge Exemplars (#, 0x8a5971c5, 0x8a5993b9) public static readonly TGI INI_NETWORK Field Value TGI LD LD file (0x6be74c6#, 0x6be74c60, #) public static readonly TGI LD Field Value TGI LTEXT LTEXT file (0x2026960b, #, #) public static readonly TGI LTEXT Field Value TGI LUA LUA file: Missions, Advisors, Tutorials and Packaging files (0xca63e2a3, 0x4a5e8ef6, #) public static readonly TGI LUA Field Value TGI LUA_GEN LUA file: Generators, Attractors, Repulsors and System LUA (0xca63e2a3, 0x4a5e8f3f, #) public static readonly TGI LUA_GEN Field Value TGI PNG PNG file (image, icon) (0x856ddbac, #, #) public static readonly TGI PNG Field Value TGI PNG_ICON PNG file: Menu building icons, bridges, overlays (0x856ddbac, 0x6a386d26, #) public static readonly TGI PNG_ICON Field Value TGI RUL RUL file: Network rules (0x0a5bcf4b, 0xaa5bcf57, #) public static readonly TGI RUL Field Value TGI S3D S3D file: Models (0x5ad0e817, #, #) public static readonly TGI S3D Field Value TGI S3D_MAXIS S3D file: Maxis Models (0x5ad0e817, 0xbadb57f1, #) public static readonly TGI S3D_MAXIS Field Value TGI SC4PATH SC4PATH file (0x296678f7, #, #) public static readonly TGI SC4PATH Field Value TGI SC4PATH_2D SC4PATH (2D) (0x296678f7, 0x69668828, #) public static readonly TGI SC4PATH_2D Field Value TGI SC4PATH_3D SC4PATH (3D) (0x296678f7, 0xa966883f, #) public static readonly TGI SC4PATH_3D Field Value TGI WAV WAV file (0x2026960b, 0xaa4d1933, #) public static readonly TGI WAV Field Value TGI XML XML file (0x88777602, #, #) public static readonly TGI XML Field Value TGI Methods CleanTGIFormat(string) Returns a string of the TGI in the same format as ToString() for comparison. public static string CleanTGIFormat(string tgi) Parameters tgi string TGI string to parse Returns string The TGI properly formated delimited by comma space, in the format of 0x########, 0x########, 0x########, with leading zeros added up to 8 characters each. Remarks The input string must contain three hexadecimal numbers, each prefixed with 0x. ParseTGIString(string) Parse a TGI string into it's component Type, Group, Index values. public static TGI ParseTGIString(string tgi) Parameters tgi string String to parse Returns TGI A TGI struct"
  },
  "api/csDBPF.DBPFUtil.html": {
    "href": "api/csDBPF.DBPFUtil.html",
    "title": "Class DBPFUtil | csDBPF",
    "summary": "Class DBPFUtil Namespace csDBPF Assembly csDBPF.dll Collection of miscellaneous utility methods to use with DBPFFiles. public static class DBPFUtil Inheritance object DBPFUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods FilterDBPFFiles(IEnumerable<string>, bool) Filters a list of file paths based on SC4 file extensions. public static IEnumerable<string> FilterDBPFFiles(this IEnumerable<string> filesToFilter, bool validateIdentifier = false) Parameters filesToFilter IEnumerable<string> List of all files to filter through validateIdentifier bool Optionally examine the first 4 bytes of each for a valid DBPF format. If omitted or set to false, only the file extension will be examined. Returns IEnumerable<string> A listing of DBPF files GenerateRandomUint() Generate a random uint value. public static uint GenerateRandomUint() Returns uint IsValidDBPF(FileInfo, bool) Examines the first bytes of the file to determine if the file is valid DBPF or not. public static bool IsValidDBPF(this FileInfo file, bool validateIdentifier = false) Parameters file FileInfo File to examine validateIdentifier bool Optionally examine the first 4 bytes of the specified file to determine if valid DBPF format. If omitted or set to false, only the file extension will be examined. Returns bool TRUE if valid SC4 DBPF file, FALSE otherwise IsValidDBPF(string, bool) Examines the first bytes of the file to determine if the file is valid DBPF or not. public static bool IsValidDBPF(this string filePath, bool validateIdentifier = false) Parameters filePath string Full File path of the file to examine validateIdentifier bool Optionally examine the first 4 bytes of each for a valid DBPF format. If omitted or set to false, only the file extension will be examined. Returns bool true if file is a valid SC4 DBPF file; otherwise, false PrintByteValues(byte[]) Appends an array of byte values sequentially into a string. public static string PrintByteValues(byte[] data) Parameters data byte[] Byte data to print. Returns string String of 2 character bytes, space separated ReverseBytes(long) Reverses the byte order for a ulong. See ReverseBytes(uint). public static long ReverseBytes(long value) Parameters value long Value to reverse Returns long Reversed uint ReverseBytes(ushort) Reverses the byte order for a ushort. Example: 3 (0x0003) returns 768 (0x0300) public static ushort ReverseBytes(ushort value) Parameters value ushort Value to reverse Returns ushort Reversed ushort Remarks See:https://www.csharp-examples.net/reverse-bytes/ ReverseBytes(uint) Reverses the byte order for a uint. See ReverseBytes(uint). public static uint ReverseBytes(uint value) Parameters value uint Value to reverse Returns uint Reversed uint ToHexString(long, int, bool, bool) Returns the uppercase string representation of the provided uint converted to hex, padded by the specified number of places. public static string ToHexString(long value, int places = 8, bool uppercase = false, bool prefix = true) Parameters value long Value to return places int Number of places to pad the value. 0-8 valid; 8 is default uppercase bool Specify output as uppercase. Default is lowercase. prefix bool Specify to omit \"0x\" prefixed to the front of the string. Default is true to include. Returns string Uppercase string representing the value Exceptions ArgumentOutOfRangeException Number of places must be between 0 and 8. ToHexString(uint?, int, bool, bool) Returns the uppercase string representation of the provided uint converted to hex, padded by the specified number of places. public static string ToHexString(uint? value, int places = 8, bool uppercase = false, bool prefix = true) Parameters value uint? Value to return places int Number of places to pad the value. 0-8 valid; 8 is default uppercase bool Specify output as uppercase. Default is lowercase. prefix bool Specify to omit \"0x\" prefixed to the front of the string. Default is true to include. Returns string Uppercase string representing the value Exceptions ArgumentOutOfRangeException Number of places must be between 0 and 8. UnixToDate(uint) Convert Unix datetime to a DateTime object. public static DateTime UnixToDate(uint time) Parameters time uint Unix time Returns DateTime DateTime object equal to the provided Unix time"
  },
  "api/csDBPF.QFS.html": {
    "href": "api/csDBPF.QFS.html",
    "title": "Class QFS | csDBPF",
    "summary": "Class QFS Namespace csDBPF Assembly csDBPF.dll An Implementation of the QFS/RefPack/LZ77 compression format used in SC4 DBPF Files. public static class QFS Inheritance object QFS Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This implementation contains control characters and other changes specific to SimCity 4. For More information on file specification refer to: https://www.wiki.sc4devotion.com/index.php?title=DBPF_Compression http://wiki.niotso.org/RefPack Methods Compress(byte[], bool) Compresses the input byte array with QFS compression public static byte[]? Compress(byte[] input, bool prefixLength = true) Parameters input byte[] The input byte array to compress prefixLength bool If set to true prefix the size of the compressed data, as is used by SC4; otherwise false. Returns byte[] A byte array containing the compressed data or null if the data cannot be compressed. Exceptions ArgumentNullException input is null. Decompress(byte[]) Decompress data compressed with QFS/RefPack compression. public static byte[] Decompress(byte[] sourceBytes) Parameters sourceBytes byte[] Compressed data array Returns byte[] Decompressed data array Exceptions IndexOutOfRangeException Thrown when the compression algorithm tries to access an element that is out of bounds in the array GetDecompressedSize(byte[]) Returns data's decompressed length in bytes. public static uint GetDecompressedSize(byte[] cData) Parameters cData byte[] Data to check Returns uint Size of decompressed data. If data is not compressed, the raw size is returned. IsCompressed(byte[]) Check if the data is compressed. public static bool IsCompressed(byte[] entryData) Parameters entryData byte[] Data to check Returns bool TRUE if data is compressed; FALSE otherwise"
  },
  "api/csDBPF.StreamExtensions.html": {
    "href": "api/csDBPF.StreamExtensions.html",
    "title": "Class StreamExtensions | csDBPF",
    "summary": "Class StreamExtensions Namespace csDBPF Assembly csDBPF.dll A set of extension methods for working with Streams and Readers public static class StreamExtensions Inheritance object StreamExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetStreamAt(BinaryReader, int, int?) Creates a new MemoryStream starting from a specified offset in the original BinaryReader's base stream. public static BinaryReader GetStreamAt(this BinaryReader reader, int offset, int? length = null) Parameters reader BinaryReader The BinaryReader whose base stream will be sliced. offset int The byte offset at which to start the substream. length int? Optional length of the substream. If null, uses the remaining bytes. Returns BinaryReader A new MemoryStream representing the specified segment. Exceptions ArgumentOutOfRangeException Thrown if offset or length exceeds stream bounds. InvalidOperationException Thrown in the base stream is not a MemoryStream ReadString(BinaryReader, int) Reads a fixed-length string from the binary stream using ASCII encoding. public static string ReadString(this BinaryReader br, int count) Parameters br BinaryReader The BinaryReader instance to read from. count int The number of bytes to read. This value must be 0 or a non-negative number or an exception will occur. Returns string A string decoded from the read bytes using ASCII encoding."
  },
  "api/csDBPF.TGI.html": {
    "href": "api/csDBPF.TGI.html",
    "title": "Struct TGI | csDBPF",
    "summary": "Struct TGI Namespace csDBPF Assembly csDBPF.dll A struct representing three unsigned integers as a Type, Group, Instance pair. public struct TGI : IComparable<TGI> Implements IComparable<TGI> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors TGI(uint, uint, uint) Create a struct representing three uints as a Type, Group, Instance triplet. A random value will be set for a Group or Instance if either is zero. public TGI(uint t, uint g, uint i) Parameters t uint Type ID g uint Group ID i uint Instance ID TGI(TGI) Create a new DBPFTGI based on a known entry type. Assigns a random Group or Instance as appropriate. public TGI(TGI knownEntry) Parameters knownEntry TGI Known entry type. Should be one of the static types in DBPFTGI class. Properties GroupID Group ID (GID). public readonly uint GroupID { get; } Property Value uint InstanceID Instance ID (IID). public readonly uint InstanceID { get; } Property Value uint TypeID Type ID (TID). public readonly uint TypeID { get; } Property Value uint Methods CompareTo(TGI) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. public int CompareTo(TGI other) Parameters other TGI An object to compare with this instance. Returns int A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other. Greater than zero This instance follows other in the sort order. Equals(object) Evaluate whether two TGIs are identical. public override readonly bool Equals(object obj) Parameters obj object Returns bool TRUE if the TGIs are identical; FALSE otherwise GetEntryDetail() Get the specific entry type associated with this TGI, as it relates to an in-game implementation. public readonly string GetEntryDetail() Returns string GetEntryType() Get the entry type associated with this TGI. public readonly string GetEntryType() Returns string GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. Matches(TGI) Evaluates equality of this item to another item. public readonly bool Matches(TGI otherTGI) Parameters otherTGI TGI TGI to compare to Returns bool TRUE if Type, Group, and Instance of both values are match; FALSE if any differ Remarks If any component of the specified TGI is 0 then the check will be skipped. This may be used to check against one of the csDBPF.DBPFTGI.KnownEntries as a pseudo \"is a\" check. MatchesAnyKnown() Check whether this TGI matches any of the known entry TGI sets. public readonly TGI MatchesAnyKnown() Returns TGI Returns the nearest known TGI match MatchesExactly(TGI) Check if the Type, Group, and Instance of two TGIs are identical. public readonly bool MatchesExactly(TGI otherTGI) Parameters otherTGI TGI TGI to check against Returns bool TRUE if check passes; FALSE otherwise RandomizeGroup() Assign a random Group ID. public void RandomizeGroup() RandomizeInstance() Assign a random Instance ID. public void RandomizeInstance() ToString() Returns the fully qualified type name of this instance. public override readonly string ToString() Returns string The fully qualified type name. Operators operator ==(TGI, TGI) public static bool operator ==(TGI left, TGI right) Parameters left TGI right TGI Returns bool operator !=(TGI, TGI) public static bool operator !=(TGI left, TGI right) Parameters left TGI right TGI Returns bool"
  },
  "api/csDBPF.XMLExemplarProperty.html": {
    "href": "api/csDBPF.XMLExemplarProperty.html",
    "title": "Class XMLExemplarProperty | csDBPF",
    "summary": "Class XMLExemplarProperty Namespace csDBPF Assembly csDBPF.dll Represents a property stored in the new_properties.xml file. public class XMLExemplarProperty Inheritance object XMLExemplarProperty Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks This class is always returned as a result of a query to new_properties.xml amd does not ever need to be user instantiated. Properties Count Count of values required for this property. Optional. public short? Count { get; } Property Value short? DataType Property data type. Required. public DBPFProperty.PropertyDataType DataType { get; } Property Value DBPFProperty.PropertyDataType DefaultValue Default value(s) for this property. Optional. public List<string> DefaultValue { get; } Property Value List<string> ID Property ID. Required. public uint ID { get; } Property Value uint MaxLength Maximum number of values for this property. Optional. public int? MaxLength { get; } Property Value int? MaxValue Maximum value for each value of this property. Optional public string MaxValue { get; } Property Value string MinLength Minimum number of values for this property. Optional. public int? MinLength { get; } Property Value int? MinValue Minimum value for each value of this property. Optional public string MinValue { get; } Property Value string Name Property name. Required. public string Name { get; } Property Value string ShowAsHex Whether this property should be shown as a hexadecimal number. Required. public bool ShowAsHex { get; } Property Value bool Step Each value is incremented by this number. Optional. public uint? Step { get; } Property Value uint? Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/csDBPF.XMLProperties.html": {
    "href": "api/csDBPF.XMLProperties.html",
    "title": "Class XMLProperties | csDBPF",
    "summary": "Class XMLProperties Namespace csDBPF Assembly csDBPF.dll Static class for interfacing with new_properties.xml file through XMLExemplarProperty objects. public static class XMLProperties Inheritance object XMLProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AllProperties List of all properties included in new_properties.xml. This file stores useful and human friendly information about the properties including name, min/max value, default values, etc. public static List<XMLExemplarProperty> AllProperties { get; } Property Value List<XMLExemplarProperty> Methods GetPropertyID(string) Look up a given property and return its identifier. public static uint GetPropertyID(string nameToFind) Parameters nameToFind string Property name Returns uint Property ID if found; 0 otherwise Remarks Match is not case sensitive and will disregard spaces because some property names have spaces and others are camel cased. GetXMLProperty(string) Queries new_properties.xml and returns the exemplar property (PROPERTY) element matching the specified Name. public static XMLExemplarProperty GetXMLProperty(string name) Parameters name string Name to lookup. Case INsensitive. Spaces are ignored Returns XMLExemplarProperty A matching XMLExemplarProperty Remarks Spaces and case sensitivity are ignored due to inconsistencies in how the Name field is saved in the xml file. GetXMLProperty(uint) Queries new_properties.xml and returns the exemplar property (PROPERTY) element matching the specified ID. public static XMLExemplarProperty GetXMLProperty(uint id) Parameters id uint Property ID to lookup Returns XMLExemplarProperty A matching XMLExemplarProperty"
  },
  "api/csDBPF.html": {
    "href": "api/csDBPF.html",
    "title": "Namespace csDBPF | csDBPF",
    "summary": "Namespace csDBPF Classes ByteArrayHelper Helper methods to parse a byte array into an array of one of the DBPF data types. DBPFEntry An abstract form of an entry item, representing an instance of a subfile that may be contained in a DBPFFile. The data for each entry is not parsed or decoded until Decode() is called to decompress and set the actual entry data. DBPFEntryDIR An implementation of DBPFEntry for Directory entries. Object data is stored in CompressedItems. DBPFEntryEXMP An implementation of DBPFEntry for Exemplar and Cohort entries. Object data is stored in ListOfProperties. DBPFEntryFSH An implementation of DBPFEntry for FSH entries. DBPFEntryFSH.FSHEntry Holds information about the bitmap data. DBPFEntryFSH.FSHImageData Contains the raw, encoded and potentially compressed image data. This is the entry point for actually getting the raw bitmap. DBPFEntryLTEXT An implementation of DBPFEntry for LTEXT entries. Object data is stored in Text. DBPFEntryPNG An implementation of DBPFEntry for PNG entries. Object data is stored in PNGImage. DBPFFile Contains the header data and all entries for a DBPF file. DBPFFileExtensions A set of extension methods for working with DBPF items DBPFHeader Stores key information about the DBPFFile. The Header is the first 96 bytes of the DBPFFile. DBPFProperty An abstract class defining the structure of a Property and the methods for interfacing with it. This class is only relevant for Exemplar and Cohort type entries. DBPFPropertyFloat Represents a property storing float value(s). DBPFPropertyLong Represents a property storing integer-based value(s). DBPFPropertyString Represents a property storing a string value. DBPFTGI A DBPFTGI encapsulates a Type, Group, Instance identifier. DBPFUtil Collection of miscellaneous utility methods to use with DBPFFiles. QFS An Implementation of the QFS/RefPack/LZ77 compression format used in SC4 DBPF Files. StreamExtensions A set of extension methods for working with Streams and Readers XMLExemplarProperty Represents a property stored in the new_properties.xml file. XMLProperties Static class for interfacing with new_properties.xml file through XMLExemplarProperty objects. Structs DBPFEntryDIR.DBDFItem Struct which represents one item in the DBDF directory list. Each item is a reference to a compressed entry in the DBPF file. DBPFError Details an error encountered when parsing a DBPF file. TGI A struct representing three unsigned integers as a Type, Group, Instance pair. Enums DBPFEntry.EncodingType Specifies the encoding type for an entry or properties. DBPFEntryFSH.BitmapType Defines the bitmap type stored in this file. DBPFProperty.ExemplarType Defines the type of exemplar and what game systems or components the exemplar contains info for. DBPFProperty.LotConfigPropertyLotObjectType The first rep (0) of a LotConfigPropertyLotObject describes its object type. DBPFProperty.LotConfigPropertyPurposeType Defines the RCI type for a lot. DBPFProperty.LotConfigPropertyRoadRequirement Defines the road orientation for a lot. DBPFProperty.LotConfigPropertyWealthType Defines the wealth for a lot. DBPFProperty.LotConfigPropertyZoneType Defines the zone type for a lot - which type of zones the lot will grow on or was plopped as. DBPFProperty.PropertyDataType This class stores information related to the possible data types for properties."
  },
  "getting-started.html": {
    "href": "getting-started.html",
    "title": "Getting Started | csDBPF",
    "summary": "Getting Started"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | csDBPF",
    "summary": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  },
  "introduction.html": {
    "href": "introduction.html",
    "title": "Introduction | csDBPF",
    "summary": "Introduction"
  }
}